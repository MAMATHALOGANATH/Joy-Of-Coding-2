/*Each book has the credentials such as 
Book_Id (int)
Book_Name (char)
Book_Author (char)
Book_Price (float)
You are required to arrange the books in such a way that, only the book at the top can be 
removed, and new book can be added only on to the top of the existing book stack. Imagine 
these books are to be kept in a box. The maximum number of books the box can contain is 5. 
Write C routine to 
• insert book
• remove book
• display the existing book details
The program should also check the following constraints.
• if the box is full then, books can’t be added
• books can’t be removed if the box is empty
Note : Use Structures. Enhance the program with pointer to structure concept (Introduce -> 
operator)
*/


#include<stdio.h>
#define max 5
struct book{
    int Book_Id ;
    char Book_Name[50] ;
    char Book_Author[50]; 
    float Book_Price;
};typedef struct book bk;




bk *push(bk* b,int *top)
{
    int ele;
    if((*top)==max-1)
    {
        printf("the box is full, books can’t be added");
        return 0;
    }
    (*top)++;
    printf("enter the details\n");
    scanf("%d%s%s%f",&b[*top].Book_Id,b[*top].Book_Name,b[*top].Book_Author,&b[*top].Book_Price);
    return b;
}

void pop(bk* b,int *top)
{
    if((*top)==-1)
    {
        printf("books can’t be removed...the box is empty");
        return;
    }
    printf("the removed book is:");
    printf("%d\t%s\t%s\t%f\n",b[*top].Book_Id,b[*top].Book_Name,b[*top].Book_Author,b[*top].Book_Price);
    (*top)--;
    
}

void display(bk* b,int top)
{
    if((top)==-1)
    {
        printf("books can’t be removed...the box is empty");
        return ;
    }
    for(int i=top;i>=0;i--)
    {
         printf("%d\t%s\t%s\t%f\n",b[i].Book_Id,b[i].Book_Name,b[i].Book_Author,b[i].Book_Price);
    }
}


int main()
{
    int top=-1,ch;
    bk b[5];
	while(1)
	{
		printf("\n1.Insert Book\n2.Remove Book\n3.Display book details\n4.Exit\nYour Choice: ");
		scanf("%d",&ch);
		switch(ch)
		{
			case 1: push(b, &top); break;
			case 2: pop(b, &top); break;
			case 3: display(b, top); break;
			case 4: return 0;
		}
	}
}
